# This is a basic workflow to help you get started with Actions

name: Tests

# Controls when the action will run. 
on: [push, pull_request]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  tests:
    name: ${{ matrix.config.name }}
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        config:
          - name: "SBCL"
            install_packages: sbcl    # Ubuntu packages
            cl: sbcl    # Common Lisp executable

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Job information
        run: |
          echo Build: ${{ matrix.config.name }}

      - name: Install Common Lisp
        run: sudo apt update &&
             sudo apt install -y ${{ matrix.config.install_packages }} &&
             ${{ matrix.config.cl }} -e '(format t "~%~a ~a up and running! (ASDF ~a)~%~%"
                      (lisp-implementation-type)
                      (lisp-implementation-version)
                      (asdf:asdf-version))'

      - name: Install Quicklisp
        run: curl --no-progress-bar --retry 10  -o quicklisp.lisp -L http://beta.quicklisp.org/quicklisp.lisp &&
             ${{ matrix.config.cl }} -f quicklisp.lisp -e '(quicklisp-quickstart:install)'

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs the tests
      - name: Load system and run tests
        run: ${{ matrix.config.cl }} -e "
             (let ((quicklisp-init (merge-pathnames \"quicklisp/setup.lisp\"
                                                    (user-homedir-pathname))))
               (when (probe-file quicklisp-init)
                 (load quicklisp-init)))
             (pushnew (truename \".\")
                      ql:*local-project-directories* )
             (ql:register-local-projects)
             (ql:quickload :pytest)
             (ql:quickload :py4cl/tests)
             (if (or
                   (let ((report (py4cl/tests:run)))
                     (when (or (plusp (slot-value report 'clunit::failed))
                               (plusp (slot-value report 'clunit::errors)))
                       (princ report)))
                   (let ((py4cl:*python-command* \"python3\"))
                     (let ((report (py4cl/tests:run)))
                       (when (or (plusp (slot-value report 'clunit::failed))
                                 (plusp (slot-value report 'clunit::errors)))
                         (princ report)))))
                 (uiop:quit 1))"
